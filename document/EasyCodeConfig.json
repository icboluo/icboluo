{
  "author": "icboluo",
  "version": "1.2.4",
  "userSecure": "",
  "currTypeMapperGroupName": "Default",
  "currTemplateGroupName": "icboluo",
  "currColumnConfigGroupName": "Default",
  "currGlobalConfigGroupName": "Default",
  "typeMapper": {
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "matchType": "REGEX",
          "columnType": "varchar(\\(\\d+\\))?",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "char(\\(\\d+\\))?",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|medium|long)*text",
          "javaType": "java.lang.String"
        },
        {
          "matchType": "REGEX",
          "columnType": "decimal(\\(\\d+,\\d+\\))?",
          "javaType": "java.math.BigDecimal"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "integer",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "REGEX",
          "columnType": "(tiny|small|medium)*int(\\(\\d+\\))?",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int4",
          "javaType": "java.lang.Integer"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int8",
          "javaType": "java.lang.Long"
        },
        {
          "matchType": "REGEX",
          "columnType": "bigint(\\(\\d+\\))?",
          "javaType": "java.lang.Long"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "date",
          "javaType": "java.time.LocalDate"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "datetime",
          "javaType": "java.time.LocalDateTime"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "timestamp",
          "javaType": "java.time.LocalDateTime"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "time",
          "javaType": "java.time.LocalTime"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "boolean",
          "javaType": "java.lang.Boolean"
        },
        {
          "matchType": "ORDINARY",
          "columnType": "int unsigned",
          "javaType": "java.lang.Integer"
        }
      ]
    }
  },
  "template": {
    "icboluo": {
      "name": "icboluo",
      "elementList": [
        {
          "name": "controller.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"/{id}\")\n    public $!{tableInfo.name} queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);\n    }\n}\n"
        },
        {
          "name": "dao.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends MyBaseMapper<$!{tableInfo.name}> {\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量更新数据（MyBatis原生foreach方法）,因为是逐条更新，所以返回值永远是1，没有必要返回\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     */\n    void updateBatchSelective(List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n     */\n    int insertOrUpdateBatch(List<$!{tableInfo.name}> entities);\n}\n"
        },
        {
          "name": "entity.java.vm",
          "code": "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n#foreach($column in $tableInfo.pkColumn)\n#if(${column.type}==\"java.lang.Integer\"||${column.type}==\"java.lang.Long\")\nimport com.baomidou.mybatisplus.annotation.IdType;\n#end\n#end\nimport com.baomidou.mybatisplus.annotation.TableId;\n\nimport java.io.Serializable;\nimport lombok.Data;\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\npublic class $!{tableInfo.name} implements Serializable {\n#foreach($column in $tableInfo.pkColumn)\n    #if(${column.comment})    /**\n     * ${column.comment}\n     */#end\n\n  #if(${column.type}==\"java.lang.String\")\n    @TableId\n#end\n  #if(${column.type}==\"java.lang.Integer\"||${column.type}==\"java.lang.Long\")\n    @TableId(type = IdType.AUTO)\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n    private static final long serialVersionUID = $!tool.serial();\n}\n"
        },
        {
          "name": "mapper.xml.vm",
          "code": "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n#if(!$pk.shortType==\"String\")\n    #set($ele = $tableInfo.fullColumn)\n#end\n#if(!$pk.shortType==\"Integer\"||!$pk.shortType==\"Long\")\n    #set($pk = $tableInfo.otherColumn)\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap id=\"BaseResultMap\" type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <sql id=\"Base_Column_List\">\n        #allSqlColumn()\n\n    </sql>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)$!column.obj.name#if($foreach.hasNext), #end#end)\n        values\n        <foreach collection=\"list\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.fullColumn)#{entity.$!{column.name}}#if($foreach.hasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)$!column.obj.name#if($foreach.hasNext), #end#end)\n        values\n        <foreach collection=\"list\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.fullColumn)#{entity.$!{column.name}}#if($foreach.hasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)        $!column.obj.name = values($!column.obj.name)#if($foreach.hasNext),\n        #end#end\n\n    </insert>\n\n    <update id=\"updateBatchSelective\">\n        <foreach collection=\"list\" item=\"entity\" separator=\";\">\n            update\n            $!tableInfo.obj.name\n            <set>\n#foreach($column in $tableInfo.otherColumn)\n                <if test=\"entity.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and entity.$!column.name != ''#end\">\n                    $!column.obj.name = #{entity.$!column.name},\n                </if>\n#end\n            </set>\n            where id = #{entity.id}\n        </foreach>\n    </update>\n</mapper>\n"
        },
        {
          "name": "service.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n}"
        },
        {
          "name": "serviceImpl.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.queryById($!pk.name);\n    }\n}"
        }
      ]
    }
  },
  "columnConfig": {
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "title": "disable",
          "type": "BOOLEAN",
          "selectValue": ""
        },
        {
          "title": "support",
          "type": "SELECT",
          "selectValue": "add,edit,query,del,ui"
        }
      ]
    }
  },
  "globalConfig": {
    "Default": {
      "name": "Default",
      "elementList": [
        {
          "name": "autoImport.vm",
          "value": "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
        },
        {
          "name": "define.vm",
          "value": "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
        },
        {
          "name": "init.vm",
          "value": "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
        },
        {
          "name": "mybatisSupport.vm",
          "value": "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.math.BigDecimal\", \"BigDecimal\").contains($column.type))\n        #set($jdbcType=\"DECIMAL\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($foreach.hasNext), #end#end#end\n"
        }
      ]
    }
  }
}
